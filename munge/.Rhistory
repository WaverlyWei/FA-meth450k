# convert factor ID to string ID
rownames(samples) <- as.character(samples$TargetID)
# adding the X in front of the
names <- sub("^", "X", colnames(RGset_raw))
names
colnames(samples)
rownames(samples)
# ERROR: faile to load
RGset_raw <- rgsetAll
RGset_raw <- BiocGenerics::updateObject(RGset_raw)
## ADD extra step to make the object valid
e <- new.env()
load(here("SuperFund/data", "rgsetAll.Rdata"), envir = e)
valid_RGset <- updateObject(rgsetAll)
validObject(valid_RGset)
#[1] TRUE
RGset_raw <- valid_RGset
dim(RGset_raw)
## dim from Rachael's code
# [1] 622399    162
Mset_raw <- minfi::preprocessRaw(RGset_raw)
betas_raw <- minfi::getBeta(Mset_raw)
# START HERE
pheno <- read.csv(here("SuperFund/data", "pheno_raw.csv"))
##### only include the samples for which we have phenotype information #######
# keep NA rows
samples <- pheno %>%
filter(Internal_CGR_control != 1 | is.na(Internal_CGR_control))
# remove failed CGR_QC
samples <- samples %>% filter(Failed_CGR_QC != 1 | is.na(Failed_CGR_QC))
# convert factor ID to string ID
rownames(samples) <- as.character(samples$TargetID)
rownames(samples)
colnames(RGset_raw)
colnames(betas_raw)
# adding the X in front of the
names <- sub("^", "X", colnames(betas_raw))
names
colnames(betas_raw) <- names
colnames(betas_raw) %in% rownames(samples)
# remove FALSE columns
betas <- betas_raw[,-c(1,2,3,4,c(77:88))]
dim(betas)
is(samples$TargetID)
head(samples$TargetID)
head(as.character(samples$TargetID))
#### only include the phenotype info for samples that CGR didn't filter out ##
all_samples <- as.character(samples$TargetID)
unfiltered_samples <- colnames(betas)
all_samples
unfiltered_samples
filtered <- all_samples[!all_samples %in% unfiltered_samples]
filtered
which(rownames(samples) %in% filtered)
colnames(betas) == rownames(pheno)
colnemas(betas)
colnames(betas)
rownames(pheno)
ncol(betas)
ncol(samples)
nrow(samples)
rownames(samples) == colnames(betas)
## ===========Replace pheno with samples ================ ##
pheno <- samples
# numeric variables
CD8_Central <- as.numeric(as.character(pheno$GZ17_CD45RAN_CCR7P_CD8))
CD8_Effector <- as.numeric(as.character(pheno$GZ21_CD45RAN_CCR7N_CD8))
pheno$GZ21_CD45RAN_CCR7N_CD8
colname(samples)
colnames(oheno)
colname(pheno)
colnames(pheno)
#CD4_Central <- as.numeric(as.character(pheno$GZ11_CD45RAN_CCR7P_CD4))
#CD4_Naive <- as.numeric(as.character(pheno$GZ13_CD45RAP_CCR7P_CD4P))
#CD4_FoxP3 <- as.numeric(as.character(pheno$GZ26_CD4P_FOXP3P))
#CD25_FoxP3 <- as.numeric(as.character(pheno$CD25P_FOXP3P))
#CD4_CD25 <- as.numeric(as.character(pheno$GZ25_CD4P_CD25P))
#NKcell <- as.numeric(as.character(pheno$GZ08LY_CD3N_CD56P))
#Bcell <- as.numeric(as.character(pheno$GZ07_CD19P))
#CD8_Tcell <- as.numeric(as.character(pheno$GZ03LY_CD8P_CD3P))
#CD4_Tcell <- as.numeric(as.character(pheno$GZ02LY_CD4P_CD3P))
#Tcell <- as.numeric(as.character(pheno$GZ01LY_CD3P))
Granulocyte <- as.numeric(as.character(pheno$GR_CBC))
#CD4_Central <- as.numeric(as.character(pheno$GZ11_CD45RAN_CCR7P_CD4))
#CD4_Naive <- as.numeric(as.character(pheno$GZ13_CD45RAP_CCR7P_CD4P))
#CD4_FoxP3 <- as.numeric(as.character(pheno$GZ26_CD4P_FOXP3P))
#CD25_FoxP3 <- as.numeric(as.character(pheno$CD25P_FOXP3P))
#CD4_CD25 <- as.numeric(as.character(pheno$GZ25_CD4P_CD25P))
#NKcell <- as.numeric(as.character(pheno$GZ08LY_CD3N_CD56P))
#Bcell <- as.numeric(as.character(pheno$GZ07_CD19P))
#CD8_Tcell <- as.numeric(as.character(pheno$GZ03LY_CD8P_CD3P))
#CD4_Tcell <- as.numeric(as.character(pheno$GZ02LY_CD4P_CD3P))
#Tcell <- as.numeric(as.character(pheno$GZ01LY_CD3P))
Granulocyte <- as.numeric(as.character(pheno$GR_CBC))
Monocyte <- as.numeric(as.character(pheno$MO))
Lymphocyte <- as.numeric(as.character(pheno$LY))
#Platelet <- as.numeric(as.character(pheno$PLT))
WBC <- as.numeric(as.character(pheno$WBC))
pheno$smk
#pack_yrs <- as.numeric(as.character(pheno$pack_yrs))
#smk_duration <- as.numeric(as.character(pheno$smk_duration))
#smk_intensity <- as.numeric(as.character(pheno$smk_intensity))
smk <- as.numeric(as.character(pheno$smk))
smk
#TCA <- as.numeric(as.character(pheno$TCA))
fa_ppm <- as.numeric(as.character(pheno$fa_ppm_))
BMI <- as.numeric(as.character(pheno$BMI))
age <- as.numeric(as.character(pheno$age))
colnames(pheno)
pheno$infection
infection <- as.numeric(as.character(pheno$infection))
#TCA <- as.numeric(as.character(pheno$TCA))
fa_ppm <- as.numeric(as.character(pheno$fa_ppm_))
BMI <- as.numeric(as.character(pheno$BMI))
age <- as.numeric(as.character(pheno$age))
# factor variables
#TCE_M_C <- as.factor(as.character(pheno$TCE_M_C))
#dich_tce <- as.factor(as.character(pheno$dich_tce))
#ID <- as.factor(as.character(pheno$ID))
Sample_ID <- as.factor(as.character(pheno$Sample_ID))
Sample_Plate <- as.factor(as.character(pheno$Sample_Plate))
Target_ID <- as.factor(as.character(pheno$TargetID))
Replicate <- as.factor(as.character(pheno$Replicate))
sex <- as.factor(as.character(pheno$sex))
smk <- as.factor(as.character(pheno$smk))
alcol <- as.factor(as.character(pheno$alcol))
infection <- as.factor(as.character(pheno$infection))
View(samples)
colnames(pheno)
# factor variables
#TCE_M_C <- as.factor(as.character(pheno$TCE_M_C))
#dich_tce <- as.factor(as.character(pheno$dich_tce))
Subject_ID <- as.factor(as.character(pheno$Subject_ID))
pheno <- data.frame(Subject_ID, Sample_ID, Target_ID, Replicate, Sample_Plate,
fa_ppm, sex, age, BMI, smk, alcol, infection,
WBC, Lymphocyte, Monocyte, Granulocyte)
# rownames = targetID
rownames(pheno) <- pheno[,3]
Mset_raw
Mset <- Mset_raw[,-c(1,2,3,4,c(77:88))]
ncol(Mset)
colnames(Mset) == rownames(pheno)
colnames(Mset)
# we need to make sure that colnames(Mset) == rownames(pheno)
# we have two places where they are switched!
#Mset <- Mset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
#19,18,20:ncol(Mset))]
#Mset <- Mset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
#24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,42,44:ncol(Mset))]
names <- sub("^", "X", colnames(Mset))
colnames(Mset) <- names
colnames(Mset) == rownames(pheno)
RGset <- RGset_raw[,-c(1,2,3,4,c(77:88))]
# we need to make sure that colnames(RGset) == rownames(pheno)
# we have two places where they are switched!
#RGset <- RGset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
#19,18,20:ncol(RGset))]
#RGset <- RGset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
#24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,42,44:ncol(RGset))]
names <- sub("^", "X", colnames(RGset))
colnames(RGset) <- names
colnames(RGset) == rownames(pheno)
View(pheno)
is(samples$fa)
# START HERE
pheno <- read.csv(here("SuperFund/data", "pheno_raw.csv"))
RGset_raw <- rgsetAll
RGset_raw <- BiocGenerics::updateObject(RGset_raw)
## ADD extra step to make the object valid
e <- new.env()
load(here("SuperFund/data", "rgsetAll.Rdata"), envir = e)
valid_RGset <- updateObject(rgsetAll)
validObject(valid_RGset)
#[1] TRUE
RGset_raw <- valid_RGset
dim(RGset_raw)
## ?? Got different dim
#[1] 622399     88
## dim from Rachael's code
# [1] 622399    162
Mset_raw <- minfi::preprocessRaw(RGset_raw)
betas_raw <- minfi::getBeta(Mset_raw)
# 1 - 4 are the NA07057_1 to NA07057_14 Internal_Controls
# START HERE
pheno <- read.csv(here("SuperFund/data", "pheno_raw.csv"))
##### only include the samples for which we have phenotype information #######
# keep NA rows
samples <- pheno %>%
filter(Internal_CGR_control != 1 | is.na(Internal_CGR_control))
# remove failed CGR_QC
samples <- samples %>% filter(Failed_CGR_QC != 1 | is.na(Failed_CGR_QC))
# convert factor ID to string ID
rownames(samples) <- as.character(samples$TargetID)
# remove redundant ID column
#samples <- samples[,-1]
# adding the X in front of the
names <- sub("^", "X", colnames(betas_raw))
colnames(betas_raw) <- names
colnames(betas_raw) %in% rownames(samples)
# remove FALSE columns
betas <- betas_raw[,-c(1,2,3,4,c(77:88))]
dim(betas)
# 485512    72
#### only include the phenotype info for samples that CGR didn't filter out ##
all_samples <- as.character(samples$TargetID)
unfiltered_samples <- colnames(betas)
filtered <- all_samples[!all_samples %in% unfiltered_samples]
# character(0)
## Nothing is filtered
## ===========Replace pheno with samples ================ ##
pheno <- samples
#which(rownames(samples) %in% filtered)
#pheno <- samples[-c(26,43,74,75,79,80,97,101,105,111,112,114,115,127,128,129,
#130,132,134,142,143,144,145),]
# we need to make sure that colnames(betas) == rownames(pheno)
# we have two places where they are switched!
#betas <- betas[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
#19,18,20:ncol(betas))]
#betas <- betas[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
#24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,42,44:ncol(betas))]
#############################################################################
# make sure pd object is a data frame and numeric covariates are transferred
# into “numeric” type, while categorical covariates are transferred into
# “factor” or “character” type
#############################################################################
# numeric variables
#CD8_Central <- as.numeric(as.character(pheno$GZ17_CD45RAN_CCR7P_CD8))
#CD8_Effector <- as.numeric(as.character(pheno$GZ21_CD45RAN_CCR7N_CD8))
#CD8_Naive <- as.numeric(as.character(pheno$GZ19_CD45RAP_CCR7P_CD8))
#CD4_Effector <- as.numeric(as.character(pheno$GZ15_CD45RAN_CCR7N_CD4))
#CD4_Central <- as.numeric(as.character(pheno$GZ11_CD45RAN_CCR7P_CD4))
#CD4_Naive <- as.numeric(as.character(pheno$GZ13_CD45RAP_CCR7P_CD4P))
#CD4_FoxP3 <- as.numeric(as.character(pheno$GZ26_CD4P_FOXP3P))
#CD25_FoxP3 <- as.numeric(as.character(pheno$CD25P_FOXP3P))
#CD4_CD25 <- as.numeric(as.character(pheno$GZ25_CD4P_CD25P))
#NKcell <- as.numeric(as.character(pheno$GZ08LY_CD3N_CD56P))
#Bcell <- as.numeric(as.character(pheno$GZ07_CD19P))
#CD8_Tcell <- as.numeric(as.character(pheno$GZ03LY_CD8P_CD3P))
#CD4_Tcell <- as.numeric(as.character(pheno$GZ02LY_CD4P_CD3P))
#Tcell <- as.numeric(as.character(pheno$GZ01LY_CD3P))
Granulocyte <- as.numeric(as.character(pheno$GR_CBC))
Monocyte <- as.numeric(as.character(pheno$MO))
Lymphocyte <- as.numeric(as.character(pheno$LY))
#Platelet <- as.numeric(as.character(pheno$PLT))
WBC <- as.numeric(as.character(pheno$WBC))
#pack_yrs <- as.numeric(as.character(pheno$pack_yrs))
#smk_duration <- as.numeric(as.character(pheno$smk_duration))
#smk_intensity <- as.numeric(as.character(pheno$smk_intensity))
#TCA <- as.numeric(as.character(pheno$TCA))
## This is the pheno categorical variable
fa <- as.numeric(as.character(pheno$fa))
fa_ppm <- as.numeric(as.character(pheno$fa_ppm_))
BMI <- as.numeric(as.character(pheno$BMI))
age <- as.numeric(as.character(pheno$age))
# factor variables
#TCE_M_C <- as.factor(as.character(pheno$TCE_M_C))
#dich_tce <- as.factor(as.character(pheno$dich_tce))
Subject_ID <- as.factor(as.character(pheno$Subject_ID))
Sample_ID <- as.factor(as.character(pheno$Sample_ID))
Sample_Plate <- as.factor(as.character(pheno$Sample_Plate))
Target_ID <- as.factor(as.character(pheno$TargetID))
Replicate <- as.factor(as.character(pheno$Replicate))
sex <- as.factor(as.character(pheno$sex))
smk <- as.factor(as.character(pheno$smk))
alcol <- as.factor(as.character(pheno$alcol))
infection <- as.factor(as.character(pheno$infection))
pheno <- data.frame(Subject_ID, Sample_ID, Target_ID, Replicate, Sample_Plate,fa
fa_ppm, sex, age, BMI, smk, alcol, infection,
WBC, Lymphocyte, Monocyte, Granulocyte)
# rownames = targetID
rownames(pheno) <- pheno[,3]
# ERROR: faile to load
RGset_raw <- rgsetAll
RGset_raw <- BiocGenerics::updateObject(RGset_raw)
## ADD extra step to make the object valid
e <- new.env()
load(here("SuperFund/data", "rgsetAll.Rdata"), envir = e)
valid_RGset <- updateObject(rgsetAll)
validObject(valid_RGset)
#[1] TRUE
RGset_raw <- valid_RGset
dim(RGset_raw)
## dim from Rachael's code
# [1] 622399    162
Mset_raw <- minfi::preprocessRaw(RGset_raw)
betas_raw <- minfi::getBeta(Mset_raw)
# START HERE
pheno <- read.csv(here("SuperFund/data", "pheno_raw.csv"))
##### only include the samples for which we have phenotype information #######
# keep NA rows
samples <- pheno %>%
filter(Internal_CGR_control != 1 | is.na(Internal_CGR_control))
##### only include the samples for which we have phenotype information #######
# keep NA rows
samples <- pheno %>%
filter(Internal_CGR_control != 1 | is.na(Internal_CGR_control))
# remove failed CGR_QC
samples <- samples %>% filter(Failed_CGR_QC != 1 | is.na(Failed_CGR_QC))
# convert factor ID to string ID
rownames(samples) <- as.character(samples$TargetID)
# adding the X in front of the
names <- sub("^", "X", colnames(betas_raw))
colnames(betas_raw) <- names
colnames(betas_raw) %in% rownames(samples)
# remove FALSE columns
betas <- betas_raw[,-c(1,2,3,4,c(77:88))]
dim(betas)
#### only include the phenotype info for samples that CGR didn't filter out ##
all_samples <- as.character(samples$TargetID)
unfiltered_samples <- colnames(betas)
filtered <- all_samples[!all_samples %in% unfiltered_samples]
filtered
## ===========Replace pheno with samples ================ ##
pheno <- samples
#CD4_Central <- as.numeric(as.character(pheno$GZ11_CD45RAN_CCR7P_CD4))
#CD4_Naive <- as.numeric(as.character(pheno$GZ13_CD45RAP_CCR7P_CD4P))
#CD4_FoxP3 <- as.numeric(as.character(pheno$GZ26_CD4P_FOXP3P))
#CD25_FoxP3 <- as.numeric(as.character(pheno$CD25P_FOXP3P))
#CD4_CD25 <- as.numeric(as.character(pheno$GZ25_CD4P_CD25P))
#NKcell <- as.numeric(as.character(pheno$GZ08LY_CD3N_CD56P))
#Bcell <- as.numeric(as.character(pheno$GZ07_CD19P))
#CD8_Tcell <- as.numeric(as.character(pheno$GZ03LY_CD8P_CD3P))
#CD4_Tcell <- as.numeric(as.character(pheno$GZ02LY_CD4P_CD3P))
#Tcell <- as.numeric(as.character(pheno$GZ01LY_CD3P))
Granulocyte <- as.numeric(as.character(pheno$GR_CBC))
Monocyte <- as.numeric(as.character(pheno$MO))
Lymphocyte <- as.numeric(as.character(pheno$LY))
#Platelet <- as.numeric(as.character(pheno$PLT))
WBC <- as.numeric(as.character(pheno$WBC))
## This is the pheno categorical variable
fa <- as.numeric(as.character(pheno$fa))
fa_ppm <- as.numeric(as.character(pheno$fa_ppm_))
BMI <- as.numeric(as.character(pheno$BMI))
age <- as.numeric(as.character(pheno$age))
# factor variables
#TCE_M_C <- as.factor(as.character(pheno$TCE_M_C))
#dich_tce <- as.factor(as.character(pheno$dich_tce))
Subject_ID <- as.factor(as.character(pheno$Subject_ID))
Sample_ID <- as.factor(as.character(pheno$Sample_ID))
Sample_Plate <- as.factor(as.character(pheno$Sample_Plate))
Target_ID <- as.factor(as.character(pheno$TargetID))
Replicate <- as.factor(as.character(pheno$Replicate))
sex <- as.factor(as.character(pheno$sex))
smk <- as.factor(as.character(pheno$smk))
alcol <- as.factor(as.character(pheno$alcol))
infection <- as.factor(as.character(pheno$infection))
pheno <- data.frame(Subject_ID, Sample_ID, Target_ID, Replicate, Sample_Plate,fa,
fa_ppm, sex, age, BMI, smk, alcol, infection,
WBC, Lymphocyte, Monocyte, Granulocyte)
# rownames = targetID
rownames(pheno) <- pheno[,3]
Mset <- Mset_raw[,-c(1,2,3,4,c(77:88))]
# we need to make sure that colnames(Mset) == rownames(pheno)
# we have two places where they are switched!
#Mset <- Mset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
#19,18,20:ncol(Mset))]
#Mset <- Mset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
#24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,42,44:ncol(Mset))]
names <- sub("^", "X", colnames(Mset))
colnames(Mset) <- names
colnames(Mset) == rownames(pheno)
RGset <- RGset_raw[,-c(1,2,3,4,c(77:88))]
# we need to make sure that colnames(RGset) == rownames(pheno)
# we have two places where they are switched!
#RGset <- RGset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
#19,18,20:ncol(RGset))]
#RGset <- RGset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
#24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,42,44:ncol(RGset))]
names <- sub("^", "X", colnames(RGset))
colnames(RGset) <- names
colnames(RGset) == rownames(pheno)
champ.QC(beta = getBeta(Mset), pheno=pheno$fa,
mdsPlot=TRUE, densityPlot=TRUE, dendrogram=TRUE, PDFplot=TRUE, Rplot= FALSE,
Feature.sel="None", resultsDir=here::here("graphs", "QC",
"preFiltering"))
getwd()
champ.QC(beta = getBeta(Mset), pheno=pheno$fa,
mdsPlot=TRUE, densityPlot=TRUE, dendrogram=TRUE, PDFplot=TRUE, Rplot= FALSE,
Feature.sel="None", resultsDir=here::here("graphs", "QC",
"preFiltering"))
champ.QC(beta = getBeta(Mset), pheno=pheno$fa,
mdsPlot=TRUE, densityPlot=TRUE, dendrogram=TRUE, PDFplot=TRUE, Rplot= FALSE,
Feature.sel="None", resultsDir=here::here("SuperFund/graphs", "QC",
"preFiltering"))
here("SuperFund/graphs", "QC",
"preFiltering", "SVD_")
champ.SVD(beta = betas, rgSet=RGset, pd=pheno,
RGEffect=FALSE, Rplot=FALSE, resultsDir=here::here("SuperFund/graphs", "QC",
"preFiltering", "SVD"))
# ERROR: faile to load
RGset_raw <- rgsetAll
RGset_raw <- BiocGenerics::updateObject(RGset_raw)
## ADD extra step to make the object valid
e <- new.env()
load(here("SuperFund/data", "rgsetAll.Rdata"), envir = e)
valid_RGset <- updateObject(rgsetAll)
validObject(valid_RGset)
#[1] TRUE
RGset_raw <- valid_RGset
dim(RGset_raw)
## dim from Rachael's code
# [1] 622399    162
Mset_raw <- minfi::preprocessRaw(RGset_raw)
betas_raw <- minfi::getBeta(Mset_raw)
# START HERE
pheno <- read.csv(here("SuperFund/data", "pheno_raw.csv"))
##### only include the samples for which we have phenotype information #######
# keep NA rows
samples <- pheno %>%
filter(Internal_CGR_control != 1 | is.na(Internal_CGR_control))
# remove failed CGR_QC
samples <- samples %>% filter(Failed_CGR_QC != 1 | is.na(Failed_CGR_QC))
# convert factor ID to string ID
rownames(samples) <- as.character(samples$TargetID)
# adding the X in front of the
names <- sub("^", "X", colnames(betas_raw))
colnames(betas_raw) <- names
colnames(betas_raw) %in% rownames(samples)
# remove FALSE columns
betas <- betas_raw[,-c(1,2,3,4,c(77:88))]
dim(betas)
#### only include the phenotype info for samples that CGR didn't filter out ##
all_samples <- as.character(samples$TargetID)
unfiltered_samples <- colnames(betas)
filtered <- all_samples[!all_samples %in% unfiltered_samples]
filtered
## ===========Replace pheno with samples ================ ##
pheno <- samples
#CD4_Central <- as.numeric(as.character(pheno$GZ11_CD45RAN_CCR7P_CD4))
#CD4_Naive <- as.numeric(as.character(pheno$GZ13_CD45RAP_CCR7P_CD4P))
#CD4_FoxP3 <- as.numeric(as.character(pheno$GZ26_CD4P_FOXP3P))
#CD25_FoxP3 <- as.numeric(as.character(pheno$CD25P_FOXP3P))
#CD4_CD25 <- as.numeric(as.character(pheno$GZ25_CD4P_CD25P))
#NKcell <- as.numeric(as.character(pheno$GZ08LY_CD3N_CD56P))
#Bcell <- as.numeric(as.character(pheno$GZ07_CD19P))
#CD8_Tcell <- as.numeric(as.character(pheno$GZ03LY_CD8P_CD3P))
#CD4_Tcell <- as.numeric(as.character(pheno$GZ02LY_CD4P_CD3P))
#Tcell <- as.numeric(as.character(pheno$GZ01LY_CD3P))
Granulocyte <- as.numeric(as.character(pheno$GR_CBC))
Monocyte <- as.numeric(as.character(pheno$MO))
Lymphocyte <- as.numeric(as.character(pheno$LY))
#Platelet <- as.numeric(as.character(pheno$PLT))
WBC <- as.numeric(as.character(pheno$WBC))
fa_ppm <- as.numeric(as.character(pheno$fa_ppm_))
BMI <- as.numeric(as.character(pheno$BMI))
age <- as.numeric(as.character(pheno$age))
# factor variables
#TCE_M_C <- as.factor(as.character(pheno$TCE_M_C))
#dich_tce <- as.factor(as.character(pheno$dich_tce))
fa <- as.factor(as.character(pheno$fa))
Subject_ID <- as.factor(as.character(pheno$Subject_ID))
Sample_ID <- as.factor(as.character(pheno$Sample_ID))
Sample_Plate <- as.factor(as.character(pheno$Sample_Plate))
Target_ID <- as.factor(as.character(pheno$TargetID))
Replicate <- as.factor(as.character(pheno$Replicate))
sex <- as.factor(as.character(pheno$sex))
smk <- as.factor(as.character(pheno$smk))
alcol <- as.factor(as.character(pheno$alcol))
infection <- as.factor(as.character(pheno$infection))
pheno <- data.frame(Subject_ID, Sample_ID, Target_ID, Replicate, Sample_Plate,fa,
fa_ppm, sex, age, BMI, smk, alcol, infection,
WBC, Lymphocyte, Monocyte, Granulocyte)
# rownames = targetID
rownames(pheno) <- pheno[,3]
Mset <- Mset_raw[,-c(1,2,3,4,c(77:88))]
# we need to make sure that colnames(Mset) == rownames(pheno)
# we have two places where they are switched!
#Mset <- Mset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
#19,18,20:ncol(Mset))]
#Mset <- Mset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
#24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,42,44:ncol(Mset))]
names <- sub("^", "X", colnames(Mset))
colnames(Mset) <- names
colnames(Mset) == rownames(pheno)
RGset <- RGset_raw[,-c(1,2,3,4,c(77:88))]
# we need to make sure that colnames(RGset) == rownames(pheno)
# we have two places where they are switched!
#RGset <- RGset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
#19,18,20:ncol(RGset))]
#RGset <- RGset[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
#24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,42,44:ncol(RGset))]
names <- sub("^", "X", colnames(RGset))
colnames(RGset) <- names
colnames(RGset) == rownames(pheno)
champ.QC(beta = getBeta(Mset), pheno=pheno$fa,
mdsPlot=TRUE, densityPlot=TRUE, dendrogram=TRUE, PDFplot=TRUE, Rplot= FALSE,
Feature.sel="None", resultsDir=here::here("SuperFund/graphs", "QC",
"preFiltering"))
champ.SVD(beta = betas, rgSet=RGset, pd=pheno,
RGEffect=FALSE, Rplot=FALSE, resultsDir=here::here("SuperFund/graphs", "QC",
"preFiltering", "SVD"))
minfi::qcReport(RGset, sampGroups = pheno$fa, sampNames = pheno$Subject_ID,
pdf = here::here("graphs","QC", "ControlProbes.pdf"))
minfi::qcReport(RGset, sampGroups = pheno$fa, sampNames = pheno$Subject_ID,
pdf = here::here("SuperFund/graphs","QC", "ControlProbes.pdf"))
minfi::qcReport(RGset, sampGroups = pheno$fa, sampNames = pheno$Subject_ID,
pdf = here::here("SuperFund/graphs","QC"))
ENmix::plotCtrl(RGset)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ENmix", version = "3.8")
ENmix::plotCtrl(RGset)
pdf(file = here::here("graphs","QC",
"Internal_ControlProbes.pdf"))
pdf(file = here::here("SuperFund/graphs","QC",
"Internal_ControlProbes.pdf"))
getwd()
##################### without the sample filtering before
detP <- minfi::detectionP(RGset)
filtered_P <- champ.filter(beta=getBeta(Mset), M=getM(Mset),
pd = pheno, beadcount = NULL, detP = detP,
arraytype = "450K")
